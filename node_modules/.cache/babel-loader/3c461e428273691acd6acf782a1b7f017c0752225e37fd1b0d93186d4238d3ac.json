{"ast":null,"code":"// Service for interacting with Google Gemini API\n// Requires: REACT_APP_GEMINI_API_KEY in your .env\n\nconst GEMINI_CHAT_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\nconst geminiApiService = {\n  /**\r\n   * Retrieve a chat response from Gemini\r\n   * @param {string} userMessage\r\n   * @returns {Promise<string>}\r\n   */\n  getChatResponse: async userMessage => {\n    var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!apiKey) {\n      throw new Error('Missing API key: please set REACT_APP_GEMINI_API_KEY in your environment');\n    }\n    const prompt = `User: \"${userMessage}\"\\nBot:`;\n    const payload = {\n      contents: [{\n        parts: [{\n          text: prompt\n        }]\n      }],\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 500\n      }\n    };\n    const response = await fetch(`${GEMINI_CHAT_URL}?key=${apiKey}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    if (!response.ok) {\n      var _errData$error;\n      const errData = await response.json().catch(() => ({}));\n      throw new Error(((_errData$error = errData.error) === null || _errData$error === void 0 ? void 0 : _errData$error.message) || 'Gemini API error');\n    }\n    const data = await response.json();\n    const text = (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text;\n    if (!text) throw new Error('Empty response from Gemini');\n    return text.trim();\n  }\n};\nexport default geminiApiService;","map":{"version":3,"names":["GEMINI_CHAT_URL","geminiApiService","getChatResponse","userMessage","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","apiKey","process","env","REACT_APP_GEMINI_API_KEY","Error","prompt","payload","contents","parts","text","generationConfig","temperature","maxOutputTokens","response","fetch","method","headers","body","JSON","stringify","ok","_errData$error","errData","json","catch","error","message","data","candidates","content","trim"],"sources":["C:/Users/Phoni/OneDrive/Documents/GitHub/322/New folder/CPTS322/src/services/geminiApiService.js"],"sourcesContent":["// Service for interacting with Google Gemini API\r\n// Requires: REACT_APP_GEMINI_API_KEY in your .env\r\n\r\nconst GEMINI_CHAT_URL =\r\n  'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\r\n\r\nconst geminiApiService = {\r\n  /**\r\n   * Retrieve a chat response from Gemini\r\n   * @param {string} userMessage\r\n   * @returns {Promise<string>}\r\n   */\r\n  getChatResponse: async (userMessage) => {\r\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\r\n    if (!apiKey) {\r\n      throw new Error(\r\n        'Missing API key: please set REACT_APP_GEMINI_API_KEY in your environment'\r\n      );\r\n    }\r\n\r\n    const prompt = `User: \"${userMessage}\"\\nBot:`;\r\n    const payload = {\r\n      contents: [{ parts: [{ text: prompt }] }],\r\n      generationConfig: { temperature: 0.7, maxOutputTokens: 500 }\r\n    };\r\n\r\n    const response = await fetch(\r\n      `${GEMINI_CHAT_URL}?key=${apiKey}`,\r\n      {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(payload)\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      const errData = await response.json().catch(() => ({}));\r\n      throw new Error(errData.error?.message || 'Gemini API error');\r\n    }\r\n\r\n    const data = await response.json();\r\n    const text = data.candidates?.[0]?.content?.parts?.[0]?.text;\r\n    if (!text) throw new Error('Empty response from Gemini');\r\n    return text.trim();\r\n  }\r\n};\r\n\r\nexport default geminiApiService;\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,eAAe,GACnB,oFAAoF;AAEtF,MAAMC,gBAAgB,GAAG;EACvB;AACF;AACA;AACA;AACA;EACEC,eAAe,EAAE,MAAOC,WAAW,IAAK;IAAA,IAAAC,gBAAA,EAAAC,iBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IACtC,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;IACnD,IAAI,CAACH,MAAM,EAAE;MACX,MAAM,IAAII,KAAK,CACb,0EACF,CAAC;IACH;IAEA,MAAMC,MAAM,GAAG,UAAUX,WAAW,SAAS;IAC7C,MAAMY,OAAO,GAAG;MACdC,QAAQ,EAAE,CAAC;QAAEC,KAAK,EAAE,CAAC;UAAEC,IAAI,EAAEJ;QAAO,CAAC;MAAE,CAAC,CAAC;MACzCK,gBAAgB,EAAE;QAAEC,WAAW,EAAE,GAAG;QAAEC,eAAe,EAAE;MAAI;IAC7D,CAAC;IAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGvB,eAAe,QAAQS,MAAM,EAAE,EAClC;MACEe,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,OAAO;IAC9B,CACF,CAAC;IAED,IAAI,CAACO,QAAQ,CAACO,EAAE,EAAE;MAAA,IAAAC,cAAA;MAChB,MAAMC,OAAO,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACvD,MAAM,IAAIpB,KAAK,CAAC,EAAAiB,cAAA,GAAAC,OAAO,CAACG,KAAK,cAAAJ,cAAA,uBAAbA,cAAA,CAAeK,OAAO,KAAI,kBAAkB,CAAC;IAC/D;IAEA,MAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,MAAMd,IAAI,IAAAd,gBAAA,GAAGgC,IAAI,CAACC,UAAU,cAAAjC,gBAAA,wBAAAC,iBAAA,GAAfD,gBAAA,CAAkB,CAAC,CAAC,cAAAC,iBAAA,wBAAAC,qBAAA,GAApBD,iBAAA,CAAsBiC,OAAO,cAAAhC,qBAAA,wBAAAC,sBAAA,GAA7BD,qBAAA,CAA+BW,KAAK,cAAAV,sBAAA,wBAAAC,sBAAA,GAApCD,sBAAA,CAAuC,CAAC,CAAC,cAAAC,sBAAA,uBAAzCA,sBAAA,CAA2CU,IAAI;IAC5D,IAAI,CAACA,IAAI,EAAE,MAAM,IAAIL,KAAK,CAAC,4BAA4B,CAAC;IACxD,OAAOK,IAAI,CAACqB,IAAI,CAAC,CAAC;EACpB;AACF,CAAC;AAED,eAAetC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}