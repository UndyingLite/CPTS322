{"ast":null,"code":"// Service for interacting with Google Gemini API\n// Requires: REACT_APP_GEMINI_API_KEY in your .env\n\nconst geminiApiService = {\n  /**\r\n   * Retrieve a chat response from Gemini\r\n   * @param {string} userMessage\r\n   * @returns {Promise<string>}\r\n   */\n  getChatResponse: async userMessage => {\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!apiKey) {\n      throw new Error('Missing API key: please set REACT_APP_GEMINI_API_KEY in your environment');\n    }\n    const endpoint = `/api/chat`;\n    const payload = new URLSearchParams();\n    payload.append('user_input', userMessage);\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: payload\n    });\n    if (!response.ok) {\n      var _errData$error;\n      const errData = await response.json().catch(() => ({}));\n      throw new Error(((_errData$error = errData.error) === null || _errData$error === void 0 ? void 0 : _errData$error.message) || 'Gemini API error');\n    }\n    const data = await response.json();\n    const text = data.reply;\n    if (!text) throw new Error('Empty response from Gemini');\n    return text.trim();\n  }\n};\nexport default geminiApiService;","map":{"version":3,"names":["geminiApiService","getChatResponse","userMessage","apiKey","process","env","REACT_APP_GEMINI_API_KEY","Error","endpoint","payload","URLSearchParams","append","response","fetch","method","headers","body","ok","_errData$error","errData","json","catch","error","message","data","text","reply","trim"],"sources":["C:/Users/Phoni/OneDrive/Documents/GitHub/322/New folder/CPTS322/src/services/geminiApiService.js"],"sourcesContent":["// Service for interacting with Google Gemini API\r\n// Requires: REACT_APP_GEMINI_API_KEY in your .env\r\n\r\nconst geminiApiService = {\r\n  /**\r\n   * Retrieve a chat response from Gemini\r\n   * @param {string} userMessage\r\n   * @returns {Promise<string>}\r\n   */\r\n  getChatResponse: async (userMessage) => {\r\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\r\n    if (!apiKey) {\r\n      throw new Error(\r\n        'Missing API key: please set REACT_APP_GEMINI_API_KEY in your environment'\r\n      );\r\n    }\r\n\r\n    const endpoint = `/api/chat`;\r\n    const payload = new URLSearchParams();\r\n    payload.append('user_input', userMessage);\r\n\r\n    const response = await fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n      body: payload\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errData = await response.json().catch(() => ({}));\r\n      throw new Error(errData.error?.message || 'Gemini API error');\r\n    }\r\n\r\n    const data = await response.json();\r\n    const text = data.reply;\r\n    if (!text) throw new Error('Empty response from Gemini');\r\n    return text.trim();\r\n  }\r\n};\r\n\r\nexport default geminiApiService;\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,gBAAgB,GAAG;EACvB;AACF;AACA;AACA;AACA;EACEC,eAAe,EAAE,MAAOC,WAAW,IAAK;IACtC,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;IACnD,IAAI,CAACH,MAAM,EAAE;MACX,MAAM,IAAII,KAAK,CACb,0EACF,CAAC;IACH;IAEA,MAAMC,QAAQ,GAAG,WAAW;IAC5B,MAAMC,OAAO,GAAG,IAAIC,eAAe,CAAC,CAAC;IACrCD,OAAO,CAACE,MAAM,CAAC,YAAY,EAAET,WAAW,CAAC;IAEzC,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAACL,QAAQ,EAAE;MACrCM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAoC,CAAC;MAChEC,IAAI,EAAEP;IACR,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACK,EAAE,EAAE;MAAA,IAAAC,cAAA;MAChB,MAAMC,OAAO,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACvD,MAAM,IAAId,KAAK,CAAC,EAAAW,cAAA,GAAAC,OAAO,CAACG,KAAK,cAAAJ,cAAA,uBAAbA,cAAA,CAAeK,OAAO,KAAI,kBAAkB,CAAC;IAC/D;IAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,MAAMK,IAAI,GAAGD,IAAI,CAACE,KAAK;IACvB,IAAI,CAACD,IAAI,EAAE,MAAM,IAAIlB,KAAK,CAAC,4BAA4B,CAAC;IACxD,OAAOkB,IAAI,CAACE,IAAI,CAAC,CAAC;EACpB;AACF,CAAC;AAED,eAAe3B,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}