{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaleb\\\\OneDrive\\\\Desktop\\\\322 AI Travel Buddy Project\\\\src\\\\components\\\\DestinationSuggestion.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport geminiApiService from '../services/geminiApiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DestinationSuggestion({\n  onSelectDestination\n}) {\n  _s();\n  const [preferences, setPreferences] = useState({\n    budget: '',\n    duration: '',\n    interests: '',\n    climate: '',\n    travelStyle: '',\n    previousDestinations: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [suggestions, setSuggestions] = useState(null);\n  const [error, setError] = useState('');\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setPreferences(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n    try {\n      let result;\n\n      // Try to use the Gemini API\n      try {\n        // Call the Gemini API with the new method\n        result = await geminiApiService.getDestinationRecommendations(preferences);\n        console.log(\"Gemini API result:\", result);\n      } catch (apiError) {\n        console.error(\"Gemini API error:\", apiError);\n        // Fall back to mock data on API error\n        result = {\n          destinations: generateMockDestinations(preferences)\n        };\n      }\n      setSuggestions(result);\n    } catch (err) {\n      console.error('Error fetching suggestions:', err);\n      setError('Failed to get destination suggestions. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const generateMockDestinations = prefs => {\n    // This function creates realistic suggestions based on user preferences\n    // In the final implementation, this would be replaced with the Claude API response\n\n    const destinationsByClimate = {\n      'Tropical': ['Bali, Indonesia', 'Phuket, Thailand', 'Costa Rica'],\n      'Mediterranean': ['Barcelona, Spain', 'Amalfi Coast, Italy', 'Santorini, Greece'],\n      'Desert': ['Marrakech, Morocco', 'Dubai, UAE', 'Sedona, Arizona'],\n      'Alpine': ['Swiss Alps', 'Banff, Canada', 'Queenstown, New Zealand'],\n      'Temperate': ['Kyoto, Japan', 'Portland, Oregon', 'Melbourne, Australia'],\n      'Any': ['Tokyo, Japan', 'Paris, France', 'New York City, USA']\n    };\n    const destinationsByStyle = {\n      'Adventure': ['New Zealand', 'Costa Rica', 'Nepal'],\n      'Cultural': ['Japan', 'Italy', 'Morocco'],\n      'Relaxation': ['Maldives', 'Bali', 'Hawaii'],\n      'Urban': ['New York', 'Tokyo', 'London'],\n      'Family': ['Orlando', 'San Diego', 'Singapore']\n    };\n    const budgetRanges = {\n      'Budget': ['Thailand', 'Vietnam', 'Mexico'],\n      'Moderate': ['Spain', 'Portugal', 'Greece'],\n      'Luxury': ['Switzerland', 'Japan', 'Maldives']\n    };\n\n    // Select appropriate destinations based on user preferences\n    let possibleDestinations = [];\n    if (prefs.climate && prefs.climate !== 'Any') {\n      possibleDestinations = [...possibleDestinations, ...destinationsByClimate[prefs.climate]];\n    }\n    if (prefs.travelStyle) {\n      possibleDestinations = [...possibleDestinations, ...destinationsByStyle[prefs.travelStyle]];\n    }\n    if (prefs.budget) {\n      possibleDestinations = [...possibleDestinations, ...budgetRanges[prefs.budget]];\n    }\n\n    // If no matches or no preferences, use defaults\n    if (possibleDestinations.length === 0) {\n      possibleDestinations = ['Paris, France', 'Tokyo, Japan', 'Bali, Indonesia', 'New York City, USA', 'Barcelona, Spain'];\n    }\n\n    // Remove duplicates\n    possibleDestinations = [...new Set(possibleDestinations)];\n\n    // Filter out previously visited places\n    if (prefs.previousDestinations) {\n      const visitedPlaces = prefs.previousDestinations.split(',').map(p => p.trim().toLowerCase());\n      possibleDestinations = possibleDestinations.filter(dest => !visitedPlaces.some(place => dest.toLowerCase().includes(place)));\n    }\n\n    // Ensure we have at least 3 destinations\n    while (possibleDestinations.length < 3) {\n      const defaults = ['London, UK', 'Rome, Italy', 'Sydney, Australia', 'Cape Town, South Africa'];\n      for (const dest of defaults) {\n        if (!possibleDestinations.includes(dest)) {\n          possibleDestinations.push(dest);\n          break;\n        }\n      }\n    }\n\n    // Select 3 random destinations from the possibilities\n    const selected = [];\n    while (selected.length < 3 && possibleDestinations.length > 0) {\n      const randomIndex = Math.floor(Math.random() * possibleDestinations.length);\n      const destination = possibleDestinations[randomIndex];\n      selected.push(destination);\n      possibleDestinations.splice(randomIndex, 1);\n    }\n\n    // Create full destination objects\n    return selected.map(name => {\n      // Determine budget range based on preferences or destination\n      let dailyBudget;\n      if (prefs.budget === 'Budget') {\n        dailyBudget = \"$50-$100\";\n      } else if (prefs.budget === 'Moderate') {\n        dailyBudget = \"$100-$200\";\n      } else if (prefs.budget === 'Luxury') {\n        dailyBudget = \"$200+\";\n      } else {\n        // Assign based on destination if no preference given\n        const expensiveDestinations = ['Switzerland', 'Japan', 'Norway', 'Iceland', 'Dubai'];\n        const cheapDestinations = ['Thailand', 'Vietnam', 'Mexico', 'Indonesia', 'Turkey'];\n        if (expensiveDestinations.some(d => name.includes(d))) {\n          dailyBudget = \"$150-$250\";\n        } else if (cheapDestinations.some(d => name.includes(d))) {\n          dailyBudget = \"$50-$100\";\n        } else {\n          dailyBudget = \"$100-$150\";\n        }\n      }\n\n      // Generate description and attractions based on destination\n      const descriptions = {\n        'Bali': 'A tropical paradise with stunning beaches, lush rice terraces, and a vibrant cultural scene.',\n        'Thailand': 'Known for beautiful beaches, ornate temples, and delicious street food.',\n        'Costa Rica': 'A nature lover\\'s dream with rainforests, volcanoes, and abundant wildlife.',\n        'Barcelona': 'A vibrant city with stunning architecture, Mediterranean beaches, and world-class cuisine.',\n        'Italy': 'Home to incredible history, art, and some of the world\\'s best food and wine.',\n        'Greece': 'Famous for whitewashed buildings, crystal-clear waters, and ancient ruins.',\n        'Morocco': 'A colorful country with bustling markets, desert landscapes, and rich cultural heritage.',\n        'Dubai': 'An ultramodern city with futuristic architecture, luxury shopping, and desert adventures.',\n        'Japan': 'A fascinating blend of ancient traditions and cutting-edge technology.',\n        'New Zealand': 'Known for dramatic landscapes, outdoor adventures, and Maori culture.',\n        'France': 'Famous for its cuisine, art, architecture, and romantic atmosphere.',\n        'USA': 'Diverse landscapes, vibrant cities, and endless entertainment options.'\n      };\n      const attractions = {\n        'Bali': ['Sacred Monkey Forest', 'Ubud Rice Terraces', 'Uluwatu Temple', 'Kuta Beach'],\n        'Thailand': ['Grand Palace', 'Phi Phi Islands', 'Wat Arun', 'Khao San Road'],\n        'Costa Rica': ['Arenal Volcano', 'Manuel Antonio National Park', 'Monteverde Cloud Forest'],\n        'Barcelona': ['Sagrada Familia', 'Park GÃ¼ell', 'La Rambla', 'Gothic Quarter'],\n        'Italy': ['Colosseum', 'Venice Canals', 'Florence Cathedral', 'Amalfi Coast'],\n        'Greece': ['Acropolis', 'Santorini Caldera', 'Mykonos Windmills', 'Meteora Monasteries'],\n        'Morocco': ['Jemaa el-Fnaa', 'Bahia Palace', 'Sahara Desert', 'Blue City of Chefchaouen'],\n        'Dubai': ['Burj Khalifa', 'Palm Jumeirah', 'Dubai Mall', 'Desert Safari'],\n        'Japan': ['Mount Fuji', 'Fushimi Inari Shrine', 'Tokyo Skytree', 'Arashiyama Bamboo Grove'],\n        'New Zealand': ['Milford Sound', 'Hobbiton', 'Rotorua', 'Franz Josef Glacier'],\n        'France': ['Eiffel Tower', 'Louvre Museum', 'Mont Saint-Michel', 'French Riviera'],\n        'USA': ['Grand Canyon', 'Times Square', 'Golden Gate Bridge', 'Walt Disney World']\n      };\n      const bestTimes = {\n        'Bali': 'April to October (dry season)',\n        'Thailand': 'November to March (cool season)',\n        'Costa Rica': 'December to April (dry season)',\n        'Barcelona': 'April to June or September to October',\n        'Italy': 'April to June or September to October',\n        'Greece': 'May to October',\n        'Morocco': 'March to May or September to November',\n        'Dubai': 'November to March (cooler months)',\n        'Japan': 'March to May (cherry blossoms) or October to November (fall colors)',\n        'New Zealand': 'December to February (summer)',\n        'France': 'April to October',\n        'USA': 'Varies by region'\n      };\n\n      // Find matching description and attractions\n      let description = 'A wonderful destination with plenty to see and do.';\n      let destinationAttractions = ['Local sightseeing', 'Cultural experiences', 'Regional cuisine'];\n      let bestTimeToVisit = 'Varies by season';\n\n      // Match partial names to our database entries\n      for (const [key, desc] of Object.entries(descriptions)) {\n        if (name.includes(key)) {\n          description = desc;\n          break;\n        }\n      }\n      for (const [key, attr] of Object.entries(attractions)) {\n        if (name.includes(key)) {\n          destinationAttractions = attr.slice(0, 3);\n          break;\n        }\n      }\n      for (const [key, time] of Object.entries(bestTimes)) {\n        if (name.includes(key)) {\n          bestTimeToVisit = time;\n          break;\n        }\n      }\n      return {\n        name,\n        description,\n        attractions: destinationAttractions,\n        bestTimeToVisit,\n        estimatedDailyBudget: dailyBudget\n      };\n    });\n  };\n  const handleSelectDestination = destination => {\n    if (onSelectDestination) {\n      onSelectDestination(destination);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Your Perfect Destination\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"ai-powered-note\",\n      children: \"\\u2728 Powered by Google Gemini AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"budget\",\n          children: \"Budget\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"budget\",\n          name: \"budget\",\n          value: preferences.budget,\n          onChange: handleInputChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select your budget\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Budget\",\n            children: \"Budget (under $100/day)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Moderate\",\n            children: \"Moderate ($100-$200/day)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Luxury\",\n            children: \"Luxury (over $200/day)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"duration\",\n          children: \"Trip Duration (days)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"duration\",\n          name: \"duration\",\n          min: \"1\",\n          max: \"90\",\n          value: preferences.duration,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"interests\",\n          children: \"Interests (comma separated)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"interests\",\n          name: \"interests\",\n          placeholder: \"e.g., hiking, museums, food, beaches\",\n          value: preferences.interests,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"climate\",\n          children: \"Preferred Climate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"climate\",\n          name: \"climate\",\n          value: preferences.climate,\n          onChange: handleInputChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select climate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Tropical\",\n            children: \"Tropical\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Mediterranean\",\n            children: \"Mediterranean\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Desert\",\n            children: \"Desert\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Alpine\",\n            children: \"Alpine/Mountain\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Temperate\",\n            children: \"Temperate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Any\",\n            children: \"Any climate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"travelStyle\",\n          children: \"Travel Style\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"travelStyle\",\n          name: \"travelStyle\",\n          value: preferences.travelStyle,\n          onChange: handleInputChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select travel style\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Adventure\",\n            children: \"Adventure/Outdoor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Cultural\",\n            children: \"Cultural/Historical\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Relaxation\",\n            children: \"Relaxation/Spa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Urban\",\n            children: \"Urban Exploration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Family\",\n            children: \"Family-friendly\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"previousDestinations\",\n          children: \"Places You've Already Visited\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"previousDestinations\",\n          name: \"previousDestinations\",\n          placeholder: \"e.g., Paris, Tokyo, Bali\",\n          value: preferences.previousDestinations,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? 'Finding destinations...' : 'Get Recommendations'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 17\n    }, this), suggestions && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"suggestions-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recommended Destinations for You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"destinations-grid\",\n        children: suggestions.destinations.map((dest, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"destination-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: dest.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: dest.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Key Attractions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: dest.attractions.map((attraction, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: attraction\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"destination-meta\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Best time to visit:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 22\n              }, this), \" \", dest.bestTimeToVisit]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Daily budget:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 22\n              }, this), \" \", dest.estimatedDailyBudget]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSelectDestination(dest),\n            children: \"Select This Destination\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n_s(DestinationSuggestion, \"Q1BfN0GbhWPCAnZJZkr+ubxF0s8=\");\n_c = DestinationSuggestion;\nexport default DestinationSuggestion;\nvar _c;\n$RefreshReg$(_c, \"DestinationSuggestion\");","map":{"version":3,"names":["React","useState","geminiApiService","jsxDEV","_jsxDEV","DestinationSuggestion","onSelectDestination","_s","preferences","setPreferences","budget","duration","interests","climate","travelStyle","previousDestinations","isLoading","setIsLoading","suggestions","setSuggestions","error","setError","handleInputChange","e","name","value","target","prev","handleSubmit","preventDefault","result","getDestinationRecommendations","console","log","apiError","destinations","generateMockDestinations","err","prefs","destinationsByClimate","destinationsByStyle","budgetRanges","possibleDestinations","length","Set","visitedPlaces","split","map","p","trim","toLowerCase","filter","dest","some","place","includes","defaults","push","selected","randomIndex","Math","floor","random","destination","splice","dailyBudget","expensiveDestinations","cheapDestinations","d","descriptions","attractions","bestTimes","description","destinationAttractions","bestTimeToVisit","key","desc","Object","entries","attr","slice","time","estimatedDailyBudget","handleSelectDestination","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","htmlFor","id","onChange","type","min","max","placeholder","disabled","index","attraction","i","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kaleb/OneDrive/Desktop/322 AI Travel Buddy Project/src/components/DestinationSuggestion.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport geminiApiService from '../services/geminiApiService';\r\n\r\nfunction DestinationSuggestion({ onSelectDestination }) {\r\n  const [preferences, setPreferences] = useState({\r\n    budget: '',\r\n    duration: '',\r\n    interests: '',\r\n    climate: '',\r\n    travelStyle: '',\r\n    previousDestinations: '',\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [suggestions, setSuggestions] = useState(null);\r\n  const [error, setError] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setPreferences(prev => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      let result;\r\n      \r\n      // Try to use the Gemini API\r\n      try {\r\n        // Call the Gemini API with the new method\r\n        result = await geminiApiService.getDestinationRecommendations(preferences);\r\n        console.log(\"Gemini API result:\", result);\r\n      } catch (apiError) {\r\n        console.error(\"Gemini API error:\", apiError);\r\n        // Fall back to mock data on API error\r\n        result = { destinations: generateMockDestinations(preferences) };\r\n      }\r\n      \r\n      setSuggestions(result);\r\n    } catch (err) {\r\n      console.error('Error fetching suggestions:', err);\r\n      setError('Failed to get destination suggestions. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateMockDestinations = (prefs) => {\r\n    // This function creates realistic suggestions based on user preferences\r\n    // In the final implementation, this would be replaced with the Claude API response\r\n    \r\n    const destinationsByClimate = {\r\n      'Tropical': ['Bali, Indonesia', 'Phuket, Thailand', 'Costa Rica'],\r\n      'Mediterranean': ['Barcelona, Spain', 'Amalfi Coast, Italy', 'Santorini, Greece'],\r\n      'Desert': ['Marrakech, Morocco', 'Dubai, UAE', 'Sedona, Arizona'],\r\n      'Alpine': ['Swiss Alps', 'Banff, Canada', 'Queenstown, New Zealand'],\r\n      'Temperate': ['Kyoto, Japan', 'Portland, Oregon', 'Melbourne, Australia'],\r\n      'Any': ['Tokyo, Japan', 'Paris, France', 'New York City, USA']\r\n    };\r\n    \r\n    const destinationsByStyle = {\r\n      'Adventure': ['New Zealand', 'Costa Rica', 'Nepal'],\r\n      'Cultural': ['Japan', 'Italy', 'Morocco'],\r\n      'Relaxation': ['Maldives', 'Bali', 'Hawaii'],\r\n      'Urban': ['New York', 'Tokyo', 'London'],\r\n      'Family': ['Orlando', 'San Diego', 'Singapore']\r\n    };\r\n    \r\n    const budgetRanges = {\r\n      'Budget': ['Thailand', 'Vietnam', 'Mexico'],\r\n      'Moderate': ['Spain', 'Portugal', 'Greece'],\r\n      'Luxury': ['Switzerland', 'Japan', 'Maldives']\r\n    };\r\n\r\n    // Select appropriate destinations based on user preferences\r\n    let possibleDestinations = [];\r\n    \r\n    if (prefs.climate && prefs.climate !== 'Any') {\r\n      possibleDestinations = [...possibleDestinations, ...destinationsByClimate[prefs.climate]];\r\n    }\r\n    \r\n    if (prefs.travelStyle) {\r\n      possibleDestinations = [...possibleDestinations, ...destinationsByStyle[prefs.travelStyle]];\r\n    }\r\n    \r\n    if (prefs.budget) {\r\n      possibleDestinations = [...possibleDestinations, ...budgetRanges[prefs.budget]];\r\n    }\r\n    \r\n    // If no matches or no preferences, use defaults\r\n    if (possibleDestinations.length === 0) {\r\n      possibleDestinations = ['Paris, France', 'Tokyo, Japan', 'Bali, Indonesia', 'New York City, USA', 'Barcelona, Spain'];\r\n    }\r\n    \r\n    // Remove duplicates\r\n    possibleDestinations = [...new Set(possibleDestinations)];\r\n    \r\n    // Filter out previously visited places\r\n    if (prefs.previousDestinations) {\r\n      const visitedPlaces = prefs.previousDestinations.split(',').map(p => p.trim().toLowerCase());\r\n      possibleDestinations = possibleDestinations.filter(dest => \r\n        !visitedPlaces.some(place => dest.toLowerCase().includes(place))\r\n      );\r\n    }\r\n    \r\n    // Ensure we have at least 3 destinations\r\n    while (possibleDestinations.length < 3) {\r\n      const defaults = ['London, UK', 'Rome, Italy', 'Sydney, Australia', 'Cape Town, South Africa'];\r\n      for (const dest of defaults) {\r\n        if (!possibleDestinations.includes(dest)) {\r\n          possibleDestinations.push(dest);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Select 3 random destinations from the possibilities\r\n    const selected = [];\r\n    while (selected.length < 3 && possibleDestinations.length > 0) {\r\n      const randomIndex = Math.floor(Math.random() * possibleDestinations.length);\r\n      const destination = possibleDestinations[randomIndex];\r\n      selected.push(destination);\r\n      possibleDestinations.splice(randomIndex, 1);\r\n    }\r\n    \r\n    // Create full destination objects\r\n    return selected.map(name => {\r\n      // Determine budget range based on preferences or destination\r\n      let dailyBudget;\r\n      if (prefs.budget === 'Budget') {\r\n        dailyBudget = \"$50-$100\";\r\n      } else if (prefs.budget === 'Moderate') {\r\n        dailyBudget = \"$100-$200\";\r\n      } else if (prefs.budget === 'Luxury') {\r\n        dailyBudget = \"$200+\";\r\n      } else {\r\n        // Assign based on destination if no preference given\r\n        const expensiveDestinations = ['Switzerland', 'Japan', 'Norway', 'Iceland', 'Dubai'];\r\n        const cheapDestinations = ['Thailand', 'Vietnam', 'Mexico', 'Indonesia', 'Turkey'];\r\n        \r\n        if (expensiveDestinations.some(d => name.includes(d))) {\r\n          dailyBudget = \"$150-$250\";\r\n        } else if (cheapDestinations.some(d => name.includes(d))) {\r\n          dailyBudget = \"$50-$100\";\r\n        } else {\r\n          dailyBudget = \"$100-$150\";\r\n        }\r\n      }\r\n      \r\n      // Generate description and attractions based on destination\r\n      const descriptions = {\r\n        'Bali': 'A tropical paradise with stunning beaches, lush rice terraces, and a vibrant cultural scene.',\r\n        'Thailand': 'Known for beautiful beaches, ornate temples, and delicious street food.',\r\n        'Costa Rica': 'A nature lover\\'s dream with rainforests, volcanoes, and abundant wildlife.',\r\n        'Barcelona': 'A vibrant city with stunning architecture, Mediterranean beaches, and world-class cuisine.',\r\n        'Italy': 'Home to incredible history, art, and some of the world\\'s best food and wine.',\r\n        'Greece': 'Famous for whitewashed buildings, crystal-clear waters, and ancient ruins.',\r\n        'Morocco': 'A colorful country with bustling markets, desert landscapes, and rich cultural heritage.',\r\n        'Dubai': 'An ultramodern city with futuristic architecture, luxury shopping, and desert adventures.',\r\n        'Japan': 'A fascinating blend of ancient traditions and cutting-edge technology.',\r\n        'New Zealand': 'Known for dramatic landscapes, outdoor adventures, and Maori culture.',\r\n        'France': 'Famous for its cuisine, art, architecture, and romantic atmosphere.',\r\n        'USA': 'Diverse landscapes, vibrant cities, and endless entertainment options.'\r\n      };\r\n      \r\n      const attractions = {\r\n        'Bali': ['Sacred Monkey Forest', 'Ubud Rice Terraces', 'Uluwatu Temple', 'Kuta Beach'],\r\n        'Thailand': ['Grand Palace', 'Phi Phi Islands', 'Wat Arun', 'Khao San Road'],\r\n        'Costa Rica': ['Arenal Volcano', 'Manuel Antonio National Park', 'Monteverde Cloud Forest'],\r\n        'Barcelona': ['Sagrada Familia', 'Park GÃ¼ell', 'La Rambla', 'Gothic Quarter'],\r\n        'Italy': ['Colosseum', 'Venice Canals', 'Florence Cathedral', 'Amalfi Coast'],\r\n        'Greece': ['Acropolis', 'Santorini Caldera', 'Mykonos Windmills', 'Meteora Monasteries'],\r\n        'Morocco': ['Jemaa el-Fnaa', 'Bahia Palace', 'Sahara Desert', 'Blue City of Chefchaouen'],\r\n        'Dubai': ['Burj Khalifa', 'Palm Jumeirah', 'Dubai Mall', 'Desert Safari'],\r\n        'Japan': ['Mount Fuji', 'Fushimi Inari Shrine', 'Tokyo Skytree', 'Arashiyama Bamboo Grove'],\r\n        'New Zealand': ['Milford Sound', 'Hobbiton', 'Rotorua', 'Franz Josef Glacier'],\r\n        'France': ['Eiffel Tower', 'Louvre Museum', 'Mont Saint-Michel', 'French Riviera'],\r\n        'USA': ['Grand Canyon', 'Times Square', 'Golden Gate Bridge', 'Walt Disney World']\r\n      };\r\n      \r\n      const bestTimes = {\r\n        'Bali': 'April to October (dry season)',\r\n        'Thailand': 'November to March (cool season)',\r\n        'Costa Rica': 'December to April (dry season)',\r\n        'Barcelona': 'April to June or September to October',\r\n        'Italy': 'April to June or September to October',\r\n        'Greece': 'May to October',\r\n        'Morocco': 'March to May or September to November',\r\n        'Dubai': 'November to March (cooler months)',\r\n        'Japan': 'March to May (cherry blossoms) or October to November (fall colors)',\r\n        'New Zealand': 'December to February (summer)',\r\n        'France': 'April to October',\r\n        'USA': 'Varies by region'\r\n      };\r\n      \r\n      // Find matching description and attractions\r\n      let description = 'A wonderful destination with plenty to see and do.';\r\n      let destinationAttractions = ['Local sightseeing', 'Cultural experiences', 'Regional cuisine'];\r\n      let bestTimeToVisit = 'Varies by season';\r\n      \r\n      // Match partial names to our database entries\r\n      for (const [key, desc] of Object.entries(descriptions)) {\r\n        if (name.includes(key)) {\r\n          description = desc;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      for (const [key, attr] of Object.entries(attractions)) {\r\n        if (name.includes(key)) {\r\n          destinationAttractions = attr.slice(0, 3);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      for (const [key, time] of Object.entries(bestTimes)) {\r\n        if (name.includes(key)) {\r\n          bestTimeToVisit = time;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      return {\r\n        name,\r\n        description,\r\n        attractions: destinationAttractions,\r\n        bestTimeToVisit,\r\n        estimatedDailyBudget: dailyBudget\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleSelectDestination = (destination) => {\r\n    if (onSelectDestination) {\r\n      onSelectDestination(destination);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Find Your Perfect Destination</h2>\r\n      <p className=\"ai-powered-note\">â¨ Powered by Google Gemini AI</p>\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label htmlFor=\"budget\">Budget</label>\r\n          <select \r\n            id=\"budget\" \r\n            name=\"budget\" \r\n            value={preferences.budget} \r\n            onChange={handleInputChange}\r\n          >\r\n            <option value=\"\">Select your budget</option>\r\n            <option value=\"Budget\">Budget (under $100/day)</option>\r\n            <option value=\"Moderate\">Moderate ($100-$200/day)</option>\r\n            <option value=\"Luxury\">Luxury (over $200/day)</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div>\r\n          <label htmlFor=\"duration\">Trip Duration (days)</label>\r\n          <input \r\n            type=\"number\" \r\n            id=\"duration\" \r\n            name=\"duration\" \r\n            min=\"1\" \r\n            max=\"90\"\r\n            value={preferences.duration} \r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        \r\n        <div>\r\n          <label htmlFor=\"interests\">Interests (comma separated)</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"interests\" \r\n            name=\"interests\" \r\n            placeholder=\"e.g., hiking, museums, food, beaches\"\r\n            value={preferences.interests} \r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        \r\n        <div>\r\n          <label htmlFor=\"climate\">Preferred Climate</label>\r\n          <select \r\n            id=\"climate\" \r\n            name=\"climate\" \r\n            value={preferences.climate} \r\n            onChange={handleInputChange}\r\n          >\r\n            <option value=\"\">Select climate</option>\r\n            <option value=\"Tropical\">Tropical</option>\r\n            <option value=\"Mediterranean\">Mediterranean</option>\r\n            <option value=\"Desert\">Desert</option>\r\n            <option value=\"Alpine\">Alpine/Mountain</option>\r\n            <option value=\"Temperate\">Temperate</option>\r\n            <option value=\"Any\">Any climate</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div>\r\n          <label htmlFor=\"travelStyle\">Travel Style</label>\r\n          <select \r\n            id=\"travelStyle\" \r\n            name=\"travelStyle\" \r\n            value={preferences.travelStyle} \r\n            onChange={handleInputChange}\r\n          >\r\n            <option value=\"\">Select travel style</option>\r\n            <option value=\"Adventure\">Adventure/Outdoor</option>\r\n            <option value=\"Cultural\">Cultural/Historical</option>\r\n            <option value=\"Relaxation\">Relaxation/Spa</option>\r\n            <option value=\"Urban\">Urban Exploration</option>\r\n            <option value=\"Family\">Family-friendly</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div>\r\n          <label htmlFor=\"previousDestinations\">Places You've Already Visited</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"previousDestinations\" \r\n            name=\"previousDestinations\" \r\n            placeholder=\"e.g., Paris, Tokyo, Bali\"\r\n            value={preferences.previousDestinations} \r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        \r\n        <button type=\"submit\" disabled={isLoading}>\r\n          {isLoading ? 'Finding destinations...' : 'Get Recommendations'}\r\n        </button>\r\n      </form>\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      \r\n      {suggestions && (\r\n        <div className=\"suggestions-container\">\r\n          <h3>Recommended Destinations for You</h3>\r\n          \r\n          <div className=\"destinations-grid\">\r\n            {suggestions.destinations.map((dest, index) => (\r\n              <div key={index} className=\"destination-card\">\r\n                <h4>{dest.name}</h4>\r\n                <p>{dest.description}</p>\r\n                \r\n                <h5>Key Attractions:</h5>\r\n                <ul>\r\n                  {dest.attractions.map((attraction, i) => (\r\n                    <li key={i}>{attraction}</li>\r\n                  ))}\r\n                </ul>\r\n                \r\n                <div className=\"destination-meta\">\r\n                  <p><strong>Best time to visit:</strong> {dest.bestTimeToVisit}</p>\r\n                  <p><strong>Daily budget:</strong> {dest.estimatedDailyBudget}</p>\r\n                </div>\r\n                \r\n                <button onClick={() => handleSelectDestination(dest)}>\r\n                  Select This Destination\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DestinationSuggestion;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}