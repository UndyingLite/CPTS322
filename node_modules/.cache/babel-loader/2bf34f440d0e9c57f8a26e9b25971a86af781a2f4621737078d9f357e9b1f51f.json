{"ast":null,"code":"const geminiApiService = {\n  getChatResponse: async userInput => {\n    var _data$candidates$;\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!apiKey) {\n      throw new Error(\"Gemini API key is missing. Please check your environment variables.\");\n    }\n    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-pro-exp-02-05:generateContent?key=${apiKey}`;\n    const requestBody = {\n      contents: [userInput],\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 2000\n      }\n    };\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    if (!response.ok) {\n      var _errorData$error;\n      const errorData = await response.json();\n      throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || 'Failed to fetch response from Gemini API');\n    }\n    const data = await response.json();\n    return ((_data$candidates$ = data.candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : _data$candidates$.content) || \"No response received from the AI.\";\n  }\n};\nexport default geminiApiService;","map":{"version":3,"names":["geminiApiService","getChatResponse","userInput","_data$candidates$","apiKey","process","env","REACT_APP_GEMINI_API_KEY","Error","endpoint","requestBody","contents","generationConfig","temperature","maxOutputTokens","response","fetch","method","headers","body","JSON","stringify","ok","_errorData$error","errorData","json","error","message","data","candidates","content"],"sources":["C:/Users/Phoni/OneDrive/Documents/GitHub/322/New folder/CPTS322/src/services/geminiApiService.js"],"sourcesContent":["const geminiApiService = {\r\n  getChatResponse: async (userInput) => {\r\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\r\n    if (!apiKey) {\r\n      throw new Error(\"Gemini API key is missing. Please check your environment variables.\");\r\n    }\r\n\r\n    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-pro-exp-02-05:generateContent?key=${apiKey}`;\r\n    const requestBody = {\r\n      contents: [userInput],\r\n      generationConfig: {\r\n        temperature: 0.7,\r\n        maxOutputTokens: 2000,\r\n      },\r\n    };\r\n\r\n    const response = await fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error?.message || 'Failed to fetch response from Gemini API');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.candidates[0]?.content || \"No response received from the AI.\";\r\n  },\r\n};\r\n\r\nexport default geminiApiService;\r\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG;EACvBC,eAAe,EAAE,MAAOC,SAAS,IAAK;IAAA,IAAAC,iBAAA;IACpC,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;IACnD,IAAI,CAACH,MAAM,EAAE;MACX,MAAM,IAAII,KAAK,CAAC,qEAAqE,CAAC;IACxF;IAEA,MAAMC,QAAQ,GAAG,wGAAwGL,MAAM,EAAE;IACjI,MAAMM,WAAW,GAAG;MAClBC,QAAQ,EAAE,CAACT,SAAS,CAAC;MACrBU,gBAAgB,EAAE;QAChBC,WAAW,EAAE,GAAG;QAChBC,eAAe,EAAE;MACnB;IACF,CAAC;IAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAQ,EAAE;MACrCQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,WAAW;IAClC,CAAC,CAAC;IAEF,IAAI,CAACK,QAAQ,CAACO,EAAE,EAAE;MAAA,IAAAC,gBAAA;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIjB,KAAK,CAAC,EAAAe,gBAAA,GAAAC,SAAS,CAACE,KAAK,cAAAH,gBAAA,uBAAfA,gBAAA,CAAiBI,OAAO,KAAI,0CAA0C,CAAC;IACzF;IAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAO,EAAAtB,iBAAA,GAAAyB,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC,cAAA1B,iBAAA,uBAAlBA,iBAAA,CAAoB2B,OAAO,KAAI,mCAAmC;EAC3E;AACF,CAAC;AAED,eAAe9B,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}